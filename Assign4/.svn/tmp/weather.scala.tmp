import scala.io.Source._
import java.net.{URLConnection, URL}
import scala.xml._
import scala.actors.Futures._
import scala.collection.mutable.{Map, SynchronizedMap, HashMap}
import scala.collection.immutable.SortedMap
 
def readFile(filename: String): String ={
	scala.io.Source.fromFile(filename).mkString
}

def fetchXML(code: String): Elem = {
	val url = new URL("http://weather.yahooapis.com/forecastrss?w="+code+"&u=f")
	val con = url.openConnection
	XML.load(con.getInputStream)
} 

def parseXML(xml: Elem): HashMap[String, String] = {
	val data = new HashMap[String, String] 
				with SynchronizedMap[String, String]
	
	data("region") = (xml \\ "@region").text
	data("city")   = (xml \\ "@city").text
	data("temp")   = (xml \\ "@temp").text 
	data("cond")   = ((xml \\ "@text").head).text
	data("high")   = ((xml \\ "@high").head).text
	data("low")    = ((xml \\ "@high").head).text	
	data
}

def formatLine(region: String, city: String, temp: String, cond: String, high: String, low: String): String = {
	val lFormatted = "%-10s | ".format(region) + 
				"%-10s | ".format(city) +
				"%-10s | ".format(temp) + 
				"%-16s | ".format(cond) + 
				"%-10s | ".format(high) + 
				"%-10s".format(low)
	lFormatted
}


def getCity(code: String): String = {
	var data = parseXML(fetchXML(code))	
	var city = formatLine(
				data("region"), data("city"), data("temp"), 
				data("cond"), data("high"), data("low"))
	city
}

def getResultsMultithread(cities: Array[String]) = {
	val tasks = for ( i <- 0 to cities.length - 1 ) yield future {
		println(getCity(cities(i)))
	}
	//cities.foreach{ code =>	
	//	new Thread { override def run() = { println(getCity(code)) } }.start		
	//}
	awaitAll(10000L, tasks: _*)
}

def getResultsSingleThread(cities: Array[String]) = {
	cities.foreach{cities => println(getCity(cities))}
}

val cities = readFile("cities.txt").split(',')

<<<<<<< .mine
println("\nSingle Thread")
println(formatLine("STATE", "CITY", "TEMP", "CONDITION", "HIGH", "LOW"))
getResultsSingleThread(cities)
=======
//println("\nSingle Thread")
//println(formatLine("REGION", "CITY", "TEMP", "CONDITION", "HIGH", "LOW"))
//getResultsSingleThread(cities)
>>>>>>> .r1686

println("\nMultithread")
println(formatLine("STATE", "CITY", "TEMP", "CONDITION", "HIGH", "LOW"))
getResultsMultithread(cities)
