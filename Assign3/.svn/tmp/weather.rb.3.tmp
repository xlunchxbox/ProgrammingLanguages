require 'open-uri'
require 'nokogiri'
require 'benchmark'

def read_file	
	IO.read(File.dirname(__FILE__) + "/cities.txt")
end

def fetch_xml(id)
	open("http://weather.yahooapis.com/forecastrss?w=#{id.chomp}&u=f")
end
	
def parse_xml(parser, list)
	weather = Hash.new
	list.split(",").each do |id|
		raw_xml = fetch_xml(id)
		parser.call(raw_xml, weather)
	end
	weather
end

def multithread_parse_xml(parser, list)
	mutex = Mutex.new
	weather = Hash.new
	arr = []
	cities_list = list.split(",")
	size_block = 4
	num_block = cities_list.size/size_block
	(0..num_block - 1).each do |index|
		arr[index] = Thread.new {
			cities_list[index * size_block..index * size_block + size_block - 1].each do |id|
				raw_xml = fetch_xml(id)
				mutex.synchronize do
					parser.call(raw_xml, weather)	
				end
			end
		}
	end
	arr[num_block] = Thread.new {
			cities_list[num_block * size_block..-1].each do |id|
				raw_xml = fetch_xml(id)
				mutex.synchronize do
					parser.call(raw_xml, weather)	
				end
			end
		}
	arr.each { |t| t.join }
	weather
end

def nokogiri_xml(raw_xml, weather)	
	source = Nokogiri::XML(raw_xml)
	location = source.xpath("//yweather:location")
	condition = source.xpath("//item//yweather:condition")
	forecast = source.xpath("//item//yweather:forecast")
	weather[[location[0]['region'], location[0]['city']]] = [condition[0]['temp'], condition[0]['text'], forecast[0]['high'], forecast[0]['low']]
end

def display_result(weather)	
	puts "State \t City \t\t High \t Low \t Current Condition"
	weather.sort.each do |k, v|
	  print("#{k[0]} \t #{k[1]} \t #{v[2]} \t #{v[3]} \t #{v[0]} \t #{v[1]}\n")
	end
	high_city = weather.max_by{|k,v| v}
	puts " \nThe city with the highest temperature:"
	print("#{high_city[0][0]} \t #{high_city[0][1]} \t #{high_city[1][2]} \t #{high_city[1][3]} \t #{high_city[1][0]}  \t #{high_city[1][1]}")
	low_city = weather.min_by{|k,v| v}
	puts " \nThe city with the lowest temperature:"
	print("#{low_city[0][0]} \t #{low_city[0][1]} \t #{low_city[1][2]} \t #{low_city[1][3]} \t #{low_city[1][0]} \t #{low_city[1][1]}\n")
end



list = read_file
puts "\nSingle Thread"
puts "\nTotal time is: " + (Benchmark.realtime{ display_result(parse_xml(method(:nokogiri_xml), list)) }).to_s()

puts "\nMultithread"
puts "\nTotal time is: " + (Benchmark.realtime{ display_result(multithread_parse_xml(method(:nokogiri_xml), list)) }).to_s()